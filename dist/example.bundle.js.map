{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./example/index.ts","webpack:///./src/gamwrapper.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","default","gpt","gamWrapper","_self","this","log","document","querySelector","options","root","rootMargin","threshold","ads","querySelectorAll","window","addEventListener","event","googletag","apiReady","setGpt","setupAd","adConfig","handleIntersect","entries","observer","forEach","entry","intersectionRatio","renderAd","target","id","setTimer","resetTimer","_this","cmd","push","ad","slot","defineSlot","path","size","addService","pubads","targeting","setTargeting","adSlots","isLoaded","canRefresh","screenTime","timerId","bindEvent","enableServices","IntersectionObserver","observe","slotId","getAdSlot","display","console","refreshAd","refresh","setInterval","clearInterval"],"mappings":"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","file":"example.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import gamWrapper from '../dist/gamwrapper';\n\nnew gamWrapper();","let gpt: any = {}; // Create global gpt variable, @todo: try adding it as static in class.\n\n/**\n * Google Ad Manager Wrapper class. \n */\nexport default class gamWrapper {\n\n    /**\n     * Contains all Ad slots.\n     */\n    static adSlots: { [id: string]: any; } = {};\n\n    /**\n     * Contains all Ads div present on page.\n     */\n    static ads: any;\n\n    /**\n     * Element for display debugging log.\n     * @todo Nothing has been done yet. Use it or update it.\n     */\n    public log: {};\n\n    /**\n     * Intersection observer Options object.\n     */\n    public options: {};\n\n    /** \n     * Class gamWrapper constructor.\n     */\n    constructor() {\n\n        let _self = this;\n        this.log = document.querySelector( '#log' );\n        this.options = {\n            root: null,\n            rootMargin: '0px',\n            threshold: 0.75\n        };\n\n        gamWrapper.ads = document.querySelectorAll( '.gamwrapper-ad' );\n\n        window.addEventListener( 'load', function(event) {\n            if ( (<any>window).googletag && (<any>window).googletag.apiReady ) {\n                _self.setGpt();\n                _self.setupAd( (<any>window).adConfig || false );\n            }\n        } );\n    }\n\n    /** \n     * Assign googletag object to gpt variable. \n     */\n    public setGpt() {\n        gpt = (<any>window).googletag;\n    }\n\n    /**\n     * Intersection observer call back to handle element intersection in viewport.\n     *\n     * @param entries list of all elements under observation.\n     * @param observer instance of observer.\n     */\n    public handleIntersect( entries: Array<object>, observer: object ) {\n\n        entries.forEach( function( entry: any ) {\n            if ( 0.75 < entry.intersectionRatio ) {\n                this.renderAd( entry.target.id );\n                this.setTimer( entry.target.id );\n            } else {\n                this.resetTimer( entry.target.id );\n            }\n        }, new gamWrapper() );\n    }\n\n    /**\n     * Does initial Setup of Ads. \n     */\n    public setupAd( adConfig: any ) {\n\n        if ( ! adConfig ) {\n            return;\n        }\n\n        gpt.cmd.push( () => {\n\n            let ad: any = {}; // @todo: If not needed remove it.\n\n            gamWrapper.ads.forEach( ( ad: any ) => {\n\n                if ( ! adConfig[ ad.id ] ) {\n                    return;\n                }\n                // Create slot.\n                let slot = gpt.defineSlot(\n                    adConfig[ ad.id ].path,\n                    adConfig[ ad.id ].size,\n                    ad.id\n                ).addService( gpt.pubads() );\n\n                if ( adConfig[ ad.id ].targeting ) {\n                    for ( let key in adConfig[ ad.id ].targeting ) {\n                        slot.setTargeting( key, adConfig[ ad.id ].targeting[ key ] );\n                    }\n                }\n\n                // Assign custom object keys.\n                gamWrapper.adSlots[ ad.id ] = slot;\n                gamWrapper.adSlots[ ad.id ].isLoaded = false;\n                gamWrapper.adSlots[ ad.id ].canRefresh = false;\n                gamWrapper.adSlots[ ad.id ].screenTime = 0;\n                gamWrapper.adSlots[ ad.id ].timerId = 0;\n\n                // Bind events.\n                this.bindEvent( gamWrapper.adSlots[ ad.id ] );\n\n                gpt.enableServices();\n\n                // Get the Ad div and assign observer.\n                let target = document.querySelector( '#' + ad.id );\n                let observer = new IntersectionObserver( this.handleIntersect, this.options ); \n                observer.observe( target );\n            } );\n        } );\n    }\n\n    /**\n     * To first time display Ad on screen.\n     *\n     * @param slotId Ad Slot Id.\n     */\n    public renderAd( slotId: string ) {\n\n        let slot = this.getAdSlot( slotId );\n\n        gpt.cmd.push( () => {\n            if ( slot && false === slot.isLoaded ) {\n                gpt.display( slotId );\n            }\n        } );\n    }\n\n    /**\n     * Bind events to Ad slots.\n     *\n     * @param slot Ad slot googletag object.\n     */\n    public bindEvent( slot: any ) {\n    \n        // Called when Ad first requested.\n        gpt.pubads().addEventListener( 'slotRequested', ( event: any ) => {\n            if ( event.slot === slot ) {\n                console.log('Slot has been requested:');\n            }\n        } );\n\n        // Called when Ad gets rendered.\n        gpt.pubads().addEventListener( 'slotRenderEnded', ( event: any ) => {\n            if ( event.slot === slot ) {\n                slot.isLoaded = true;\n                console.log( 'Slot Render Ended' );\n            }\n        } );\n\n        // Called when Ad is in viewport and ready to count as impression.\n        gpt.pubads().addEventListener( 'impressionViewable', ( event: any ) => {\n            if ( event.slot == slot ) {\n                console.log( 'Slot Impresssion Viewable' );\n                slot.canRefresh = true;\n            }\n        } );\n    }\n\n    /**\n     * Refresh one particular Ad slot.\n     *\n     * @param slot Ad slot googletag object.\n     */\n    public refreshAd( slot: any ) {\n        gpt.cmd.push( () => {\n            if ( slot && true === slot.canRefresh ) {\n                gpt.pubads().refresh( [ slot ] );\n                slot.screenTime = 0;\n                console.log( 'Ad refreshed' );\n            }\n        } );\n    }\n\n    /**\n     * Set timer to Ad slot to keep track of Ad's screen time.\n     * Also, Refreshes Ad after every 30 second of total screen time in view port.\n     *\n     * @param slotId Ad Slot Id.\n     */\n    public setTimer( slotId: string ) {\n\n        let slot = this.getAdSlot( slotId );\n\n        if ( slot && 0 === slot.timerId ) {\n\n            slot.timerId = setInterval( () => {\n                slot.screenTime += 1;\n                console.log( slotId + ' Screen Time: ' + slot.screenTime );\n                if ( 30 < slot.screenTime ) {\n                    console.log( slotId + ' Screen Time > 30s' );\n                    this.refreshAd( slot );\n                }\n            }, 1000 );\n            console.log( 'Timer set: ' + slotId );\n        }\n    }\n\n    /**\n     * Reset timer on Ad slot, It clears assigned interval when Ad is not in view port.\n     *\n     * @param slotId Ad Slot Id.\n     */\n    public resetTimer( slotId: string ) {\n\n        let slot = this.getAdSlot( slotId );\n\n        if ( slot && 0 !== slot.timerId ) {\n            clearInterval( slot.timerId );\n            slot.timerId = 0;\n            console.log( 'Timer Reset: ' + slotId );\n        }\n    }\n\n    /**\n     * Returns Ad slot object if slotId is valid else false.\n     *\n     * @param slotId Ad Slot Id.\n     *\n     * @returns Ad slot googletag object.\n     */\n    public getAdSlot( slotId: string ) {\n        return ( slotId && gamWrapper.adSlots[ slotId ] ) ? gamWrapper.adSlots[ slotId ] : false;\n    }\n}\n"],"sourceRoot":""}